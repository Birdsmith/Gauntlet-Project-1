generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  isOnline      Boolean    @default(false)
  accounts      Account[]
  channels      Channel[]  @relation("CreatedChannels")
  messages      Message[]
  reactions     Reaction[]
  sessions      Session[]
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  createdBy   User?     @relation("CreatedChannels", fields: [createdById], references: [id])
  messages    Message[]
}

model Message {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  channelId String
  replyToId String?
  files     File[]
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  replyTo   Message?  @relation("Replies", fields: [replyToId], references: [id])
  replies   Message[] @relation("Replies")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model File {
  id        String    @id @default(cuid())
  name      String
  url       String
  size      Int
  type      String
  createdAt DateTime  @default(now())
  message   Message   @relation(fields: [messageId], references: [id])
  messageId String
}
