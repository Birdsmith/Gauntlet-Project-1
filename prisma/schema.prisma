generator client {
  provider = "prisma-client-js"
  previewFeatures = []
  log = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  isOnline      Boolean    @default(false)
  lastSeen      DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  avatarEnabled Boolean    @default(false)
  videoEnabled  Boolean    @default(false)  // Whether to generate videos for avatar responses
  avatarSystemPrompt String?   @db.Text
  avatarImage   String?    @db.Text // URL to the user's avatar source image
  accounts      Account[]
  channels      Channel[]  @relation("CreatedChannels")
  messages      Message[]
  reactions     Reaction[]
  sessions      Session[]
  conversations ConversationParticipant[]
  directMessages DirectMessage[]

  @@index([email])
  @@index([isOnline])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String?
  isPrivate   Boolean   @default(false)
  createdBy   User?     @relation("CreatedChannels", fields: [createdById], references: [id], onDelete: SetNull)
  messages    Message[]

  @@index([createdById])
  @@index([name])
}

model Message {
  id          String    @id @default(cuid())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  channelId   String
  userId      String
  isEdited    Boolean   @default(false)
  files       File[]
  replyToId   String?
  replyTo     Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies     Message[] @relation("MessageReplies")
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions   Reaction[] @relation("MessageReactions")

  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
  @@index([replyToId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  messageId String?
  directMessageId String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message?  @relation("MessageReactions", fields: [messageId], references: [id], onDelete: Cascade)
  directMessage  DirectMessage? @relation("DirectMessageReactions", fields: [directMessageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
  @@unique([userId, directMessageId, emoji])
  @@index([messageId])
  @@index([directMessageId])
  @@index([userId])
}

model File {
  id             String         @id @default(cuid())
  name           String
  url            String
  size           Int
  type           String
  createdAt      DateTime       @default(now())
  message        Message?       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId      String?
  directMessage  DirectMessage? @relation("DirectMessageFiles", fields: [directMessageId], references: [id], onDelete: Cascade)
  directMessageId String?

  @@index([messageId])
  @@index([directMessageId])
}

model Conversation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isGroup       Boolean   @default(false)
  name          String?
  participants  ConversationParticipant[]
  messages      DirectMessage[]

  @@index([createdAt])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  lastRead       DateTime?
  joinedAt       DateTime     @default(now())
  isAdmin        Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model DirectMessage {
  id             String    @id @default(uuid())
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  conversationId String
  userId         String
  isEdited      Boolean   @default(false)
  replyToId     String?
  isAvatarMessage Boolean @default(false)
  avatarName     String?
  avatarVideoUrl String?   @db.Text // URL to the D-ID generated video
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo       DirectMessage?  @relation("DirectMessageReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       DirectMessage[] @relation("DirectMessageReplies")
  files         File[]        @relation("DirectMessageFiles")
  reactions     Reaction[]    @relation("DirectMessageReactions")

  @@index([conversationId])
  @@index([userId])
}
